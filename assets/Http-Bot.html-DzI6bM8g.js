import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,d as t,b as s,e as p}from"./app-C9ePvONR.js";const l={},u=n("h1",{id:"🤖http-bot",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🤖http-bot","aria-hidden":"true"},"#"),s(" 🤖Http-BOT")],-1),r=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"版本提示"),n("p",null,"以下所有api均基于最新构建的版本（见下方RELEASE）")],-1),k={href:"https://github.com/Nia-Server/NiaServer-Core/releases/",target:"_blank",rel:"noopener noreferrer"},d=n("img",{src:"https://img.shields.io/github/v/release/Nia-Server/NiaServer-Core?include_prereleases&style=for-the-badge",alt:"Latest Release",tabindex:"0",loading:"lazy"},null,-1),v=n("figcaption",null,"Latest Release",-1),m=p('<h2 id="为什么开发" tabindex="-1"><a class="header-anchor" href="#为什么开发" aria-hidden="true">#</a> 为什么开发？</h2><p>由于目前我的世界的Script-api无法实现诸如文件读写等功能,为此我们特此基于C++开发了<code>NIA-Http-Bot</code>用来实现更多功能，从而赋予Script-api更多可能</p><hr><h2 id="功能特性" tabindex="-1"><a class="header-anchor" href="#功能特性" aria-hidden="true">#</a> 功能特性</h2><ul><li>基于http可以实现对特定文件进行读写、创建以及删除等功能</li><li>基于http搭配<strong>NiaServer-Core</strong>以及<strong>LLONEBot</strong>可以实现QQ机器人与服务器联动功能</li></ul><hr><h2 id="使用前注意事项" tabindex="-1"><a class="header-anchor" href="#使用前注意事项" aria-hidden="true">#</a> 使用前注意事项</h2><p>1.本项目基于<strong>http</strong>进行通讯，故当前Minecraft版本应当注意启用<strong>minecraft/server-net</strong>模块（该模块只能运行在服务器上）</p>',8),b=n("strong",null,"NiaServer-Core",-1),g={href:"https://github.com/Nia-Server/NiaServer-Core/releases",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"NIAHttpBOT.exe",-1),f=n("code",null,"NIA-Http-Bot",-1),q=n("strong",null,"NiaServer-Core",-1),y={href:"https://github.com/Nia-Server/NiaServer-Core/issues",target:"_blank",rel:"noopener noreferrer"},w=p('<p>4.由于<strong>采用的是http通讯，而非https</strong>，我们<strong>非常不推荐</strong>您将NIAHttpBOT与基岩版服务端分开放置于两台服务器上，这是非常不安全的操作！请务必<strong>将NiaHttpBOT与基岩版服务端放置于同一台服务器之上</strong>，并<strong>注意防火墙设置</strong>，不要开放使用过程中涉及的两个端口，以免对服务器安全造成威胁！</p><hr><h2 id="使用-开发教程" tabindex="-1"><a class="header-anchor" href="#使用-开发教程" aria-hidden="true">#</a> 使用/开发教程</h2><div class="hint-container info"><p class="hint-container-title">提示</p><p>这里使用的是LLONEBot，事实上，我们是基于onebot-v11进行的开发，只要您所使用的机器人遵循这个接口，即可使用！</p></div><p>由于<strong>minecraft/server-net</strong>模块在本地存档中无法启用，所以我们应当在本地搭建一个服务器环境用于开发</p>',5),N={href:"https://www.minecraft.net/en-us/download/server/bedrock",target:"_blank",rel:"noopener noreferrer"},x=p(`<p>2.安装行为包</p><p>3.修改服务器端文件，来启用net模块：将<code>config/default/permissions.json</code>内容改为</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;allowed_modules&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;@minecraft/server-gametest&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;@minecraft/server&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;@minecraft/server-ui&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;@minecraft/server-admin&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;@minecraft/server-editor&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;@minecraft/server-net&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即可启用</p><p>4.Windows平台下下载最新release构建的<strong>NIAHttpBOT.exe</strong>来获取最新版的<code>NIAHttp-Bot</code>，Linux平台下载最新release构建的<strong>NIAHttpBOT</strong>来获取最新版的<code>NIAHttp-Bot</code></p>`,5),F={href:"https://im.qq.com/pcqq/index.shtml",target:"_blank",rel:"noopener noreferrer"},_={href:"https://llonebot.github.io/zh-CN/guide/getting-started",target:"_blank",rel:"noopener noreferrer"},C=p(`<p>6.安装后，打开机器人设置界面，<strong>启用HTTP服务</strong>，<strong>HTTP服务监听端口</strong>与下述配置文件中<strong>ClientPort</strong>保持一致，<strong>启用HTTP事件上报</strong>，上报地址如果是下述配置项目则为<code>http://127.0.0.1:10086/qqEvent</code>，机器人至此配置完毕</p><p>7.Windows平台点击<strong>NIAHttpBOT.exe</strong>启动;Linux平台在终端输入<code>./NIAHttpBOT</code>来启动！</p><p>在Linux如果出项<strong>权限不够</strong>的提示，这个错误是因为你试图运行的文件没有执行权限。你可以使用 <code>chmod</code> 命令来给文件添加执行权限。以下是具体的步骤：</p><p>7.1. 打开终端</p><p>7.2. 使用 <code>cd</code> 命令导航到文件所在的目录</p><p>7.3. 运行 <code>chmod +x NIAHttpBOT</code> 命令给文件添加执行权限</p><p>这是具体的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x NIAHttpBOT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后你就可以使用 <code>./NIAHttpBOT</code> 命令来运行你的程序了。</p><p>8.开始开发！</p><hr><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><div class="language-cfg line-numbers-mode" data-ext="cfg"><pre class="language-cfg"><code># ip地址，一般为不用改
IPAddress = &quot;127.0.0.1&quot;

# 服务器端口，需与行为包端口保持一致
ServerPort = 10086

#是否启用DOS指令功能
UseCmd = false

#是否启用QQ机器人相关功能
UseQQBot = true

# 客户端端口，需要与机器人设置的监听Http端口一致
ClientPort = 10023
https://github.com/Nia-Server/NiaServer-Docs

# 监听QQ群
QQGroup = &quot;123456789&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="qq-bot-相关指令" tabindex="-1"><a class="header-anchor" href="#qq-bot-相关指令" aria-hidden="true">#</a> QQ-BOT 相关指令</h2><h3 id="一般指令" tabindex="-1"><a class="header-anchor" href="#一般指令" aria-hidden="true">#</a> 一般指令</h3><h4 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h4><p><code>&lt;XboxID&gt;</code> 玩家的XboxID</p><p>注：当前还不能录入带空格的XboxID,需要管理员手动修改<code>player_data.json</code>文件</p><h4 id="详细指令" tabindex="-1"><a class="header-anchor" href="#详细指令" aria-hidden="true">#</a> 详细指令</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#帮助: 显示帮助菜单

#赞我: 给自己点10个赞

#绑定 &lt;XboxID&gt;: 绑定XboxID

例：#绑定 NIANIANKNIA

#查：查询自己账号的相关信息

#查 @要查询的人 : 查询别人账号的相关信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="管理指令" tabindex="-1"><a class="header-anchor" href="#管理指令" aria-hidden="true">#</a> 管理指令</h3><h4 id="参数说明-1" tabindex="-1"><a class="header-anchor" href="#参数说明-1" aria-hidden="true">#</a> 参数说明</h4><p><code>&lt;时间&gt;</code> 应当以min(分钟)、h(小时)、d(天)为结尾，前面只能为阿拉伯数字</p><p>例：1min、10h、100d等</p><h4 id="详细指令-1" tabindex="-1"><a class="header-anchor" href="#详细指令-1" aria-hidden="true">#</a> 详细指令</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
#禁言 @要禁言的人 &lt;时间&gt;: 禁言指定群成员

例：#禁言 @NIANIANKNIA 1h

#解禁 @要解禁的人: 解禁指定群成员

#改绑 @要改绑的人 &lt;XboxID&gt;: 改绑XboxID

#封禁 @要封禁的人 &lt;时间&gt;: 封禁指定群成员游戏账号

例：#封禁 @NIANIANKNIA 1d

#解封 @要解封的人: 解封指定群成员账号

#改权限 @要改权限的人 &lt;权限&gt;: 改变指定群成员的权限
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-api一览表" tabindex="-1"><a class="header-anchor" href="#http-api一览表" aria-hidden="true">#</a> HTTP API一览表</h2><h3 id="post-runcmd" tabindex="-1"><a class="header-anchor" href="#post-runcmd" aria-hidden="true">#</a> [POST] <code>/RunCmd</code></h3><p>执行DOS命令</p><div class="hint-container warning"><p class="hint-container-title">警告</p><p>由于API涉及服务器安全性问题，本功能默认关闭，请在确定做好准备的条件下修改配置文件后启用本功能！</p></div><p>可以实现的功能：</p>`,32),H={href:"https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/mkdir",target:"_blank",rel:"noopener noreferrer"},j={href:"https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/del",target:"_blank",rel:"noopener noreferrer"},O={href:"https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/echo",target:"_blank",rel:"noopener noreferrer"},S={href:"https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/windows-commands",target:"_blank",rel:"noopener noreferrer"},T=p(`<p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqRunCmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/RunCmd</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqRunCmd<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;del 123.txt&quot;</span>
    reqRunCmd<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqRunCmd<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqRunCmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Dos command executed successfully!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-checkfile" tabindex="-1"><a class="header-anchor" href="#post-checkfile" aria-hidden="true">#</a> [POST] <code>/CheckFile</code></h3><p>检查一个文件是否存在，目标文件存在则返回<code>true</code>,状态码为<code>200</code>，不存在则返回<code>false</code>，状态码为<code>400</code></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqCheckFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/CheckFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqCheckFile<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;FileName.json&quot;</span>
    reqCheckFile<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqCheckFile<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqCheckFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Target file exists.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;The target file does not exist&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-checkdir" tabindex="-1"><a class="header-anchor" href="#post-checkdir" aria-hidden="true">#</a> [POST] <code>/CheckDir</code></h3><p>检查目标文件夹是否存在，目标文件夹存在则返回<code>true</code>，状态码为<code>200</code>，不存在则返回<code>false</code>，状态码为<code>400</code></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqCheckDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/CheckDir</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqCheckDir<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;./A&quot;</span>
    reqCheckDir<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqCheckDir<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqCheckDir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Target folder exists.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;The target folder does not exist&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-createnewfile" tabindex="-1"><a class="header-anchor" href="#post-createnewfile" aria-hidden="true">#</a> [POST] <code>/CreateNewFile</code></h3><p>创建一个文件，创建成功返回<code>success</code>，状态码为<code>200</code>，创建失败则返回<code>失败原因</code>，状态码为<code>400</code></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqCreateNewFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/CreateNewFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqCreateNewFile<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span><span class="token string">&quot;这是第一行\\n这是第二行&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    reqCreateNewFile<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqCreateNewFile<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqCreateNewFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;File created successfully!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-createnewjsonfile" tabindex="-1"><a class="header-anchor" href="#post-createnewjsonfile" aria-hidden="true">#</a> [POST] <code>/CreateNewJsonFile</code></h3><p>创建一个JSON文件，创建成功返回<code>success</code>，状态码为<code>200</code>，创建失败则返回<code>失败原因</code>，状态码为<code>400</code></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqCreateNewJsonFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/CreateNewJsonFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqCreateNewJsonFile<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span><span class="token string">&quot;market111.json&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;a&quot;</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    reqCreateNewJsonFile<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqCreateNewJsonFile<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqCreateNewJsonFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;File created successfully!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-getfiledata" tabindex="-1"><a class="header-anchor" href="#post-getfiledata" aria-hidden="true">#</a> [POST] <code>/GetFileData</code></h3><p>获取文件数据，获取成功则返回文件数据（类型为字符串），状态码为<code>200</code>，获取失败则返回<code>fail</code>，状态码为<code>400</code></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqGetFileData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/GetFileData</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqGetFileData<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;text.txt&quot;</span>
    reqGetFileData<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqGetFileData<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqGetFileData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Get file data successfully! File data:&quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;The target file does not exist&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-getjsonfiledata" tabindex="-1"><a class="header-anchor" href="#post-getjsonfiledata" aria-hidden="true">#</a> [POST] <code>/GetJsonFileData</code></h3><div class="hint-container warning"><p class="hint-container-title">警告</p><p>json文件应当没有任何语法错误/注释，否则将无法正确读取json数据！，详细请查看<a href="#json%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">json文件读取注意事项</a></p></div><p>获取JSON文件数据，获取成功则返回json格式的数据，状态码为<code>200</code>，获取失败则返回<code>fail</code>，状态码为<code>400</code></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqGetJsonFileData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/GetJsonFileData</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqGetJsonFileData<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&quot;market.json&quot;</span>
    reqGetJsonFileData<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqGetJsonFileData<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqGetJsonFileData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Get file data successfully! File data:&quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;The target file does not exist&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-overwritefile" tabindex="-1"><a class="header-anchor" href="#post-overwritefile" aria-hidden="true">#</a> [POST] <code>/OverwriteFile</code></h3><p>覆盖文件内容，覆盖成功则返回<code>success</code>，状态码为<code>200</code>，覆盖失败则返回<code>失败原因</code>，状态码为<code>400</code></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqOverwriteFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/OverwriteFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqOverwriteFile<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span><span class="token string">&quot;FileName.txt&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;这是第一行\\n这是第二行&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    reqOverwriteFile<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqOverwriteFile<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqOverwriteFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Overwrite file data successfully!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-overwritejsonfile" tabindex="-1"><a class="header-anchor" href="#post-overwritejsonfile" aria-hidden="true">#</a> [POST] <code>/OverwriteJsonFile</code></h3><p>覆盖JSON文件内容，覆盖成功则返回<code>success</code>，状态码为<code>200</code>，覆盖失败则返回<code>失败原因</code>，状态码为<code>200</code></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqOverwriteJsonFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/OverwriteJsonFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqOverwriteJsonFile<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span><span class="token string">&quot;FileName.json&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;a&quot;</span><span class="token operator">:</span><span class="token string">&quot;呵呵呵呵&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    reqOverwriteJsonFile<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqOverwriteJsonFile<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqOverwriteJsonFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Overwrite file data successfully!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-writelinetofile" tabindex="-1"><a class="header-anchor" href="#post-writelinetofile" aria-hidden="true">#</a> [POST] <code>/WriteLineToFile</code></h3><p>向目标文件最后写入如一行内容，成功则返回<code>success</code>，状态码为<code>200</code>，失败则返回<code>失败原因</code>，状态码为<code>400</code></p><p><strong>注意增加换行符（\\n），否则不会换行！</strong></p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> reqWriteLineToFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://127.0.0.1:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/WriteLineToFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reqWriteLineToFile<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span><span class="token string">&quot;123.txt&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;这是一行测试内容&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    reqWriteLineToFile<span class="token punctuation">.</span>method <span class="token operator">=</span> HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">;</span>
    reqWriteLineToFile<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HttpHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqWriteLineToFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Overwrite file data successfully!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Dependent server connection failed! Check whether the dependent server started successfully.&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="post-copyfolder" tabindex="-1"><a class="header-anchor" href="#post-copyfolder" aria-hidden="true">#</a> [POST] <code>/CopyFolder</code></h3><p>将特定文件夹复制到指定位置</p><h2 id="附加说明" tabindex="-1"><a class="header-anchor" href="#附加说明" aria-hidden="true">#</a> 附加说明</h2><h3 id="json文件读取注意事项" tabindex="-1"><a class="header-anchor" href="#json文件读取注意事项" aria-hidden="true">#</a> JSON文件读取注意事项</h3><p><strong>json文件应当没有任何语法错误/注释，否则将无法正确读取json数据！</strong></p><p>以下是错误示例：</p><p>多了一个<code>,</code>产生了语法错误！</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span>value<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不能进行注释，否则会导致无法正确读取！</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">//这是一行注释，这会导致无法正常读取！</span>
    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span>value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误的使用了中文的标点符号导致语法错误！</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">//这是一行注释，这会导致无法正常读取！</span>
    <span class="token property">&quot;key1&quot;</span><span class="token operator">:</span>value，
    <span class="token string">&quot;key2&quot;</span>：value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h2><p><strong>建议使用的方法</strong></p><p>创建<code>./API/filesystem.js</code>文件，内容如下</p><p>(目前写了一些常用的功能，更多功能将在后续更新)</p>`,56),D={href:"https://github.com/Nia-Server/NiaServer-Core/blob/dev/development_behavior_packs/NIA_V4.0_BP/scripts/API/filesystem.js",target:"_blank",rel:"noopener noreferrer"},P=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>http<span class="token punctuation">,</span>HttpRequestMethod<span class="token punctuation">,</span>HttpRequest<span class="token punctuation">,</span>HttpHeader<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@minecraft/server-net&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">10086</span>
<span class="token keyword">const</span> server_url <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ExternalFS</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@function</span> 执行DOS命令
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">cmd</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String <span class="token operator">|</span> Number<span class="token punctuation">}</span></span> 获取成功返回success，服务器连接失败返回-1
     */</span>
    <span class="token function">RunCmd</span><span class="token punctuation">(</span><span class="token parameter">cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reqRunCmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/RunCmd</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqRunCmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@function</span> 获取文件内容
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String <span class="token operator">|</span> Number<span class="token punctuation">}</span></span> 获取成功返回文件数据，文件不存在返回0，服务器连接失败返回-1
     */</span>
    <span class="token function">GetFileData</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reqGetFileData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/GetFileData</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqGetFileData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@function</span> 获取json文件内容
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Object <span class="token operator">|</span> Number<span class="token punctuation">}</span></span> 获取成功返回json数据，文件不存在返回0，服务器连接失败返回-1
     */</span>
    <span class="token function">GetJSONFileData</span><span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reqGetJsonFileData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/GetJsonFileData</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqGetJsonFileData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@function</span> 创建新文件
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filecontent</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String <span class="token operator">|</span> Number<span class="token punctuation">}</span></span> 创建成功返回success，创建失败返回0，服务器连接失败返回-1
     */</span>
    <span class="token function">CreateNewFile</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span>filecontent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reqCreateNewFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/CreateNewFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span>filename<span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span>filecontent<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqCreateNewFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@function</span> 创建json文件
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">filecontent</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String <span class="token operator">|</span> Number<span class="token punctuation">}</span></span> 创建成功返回success，创建失败返回0，服务器连接失败返回-1
     */</span>
    <span class="token function">CreateNewJsonFile</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span>filecontent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reqCreateNewJsonFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/CreateNewJsonFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span>filename<span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span>filecontent<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqCreateNewJsonFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@function</span> 覆写文件
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filecontent</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String <span class="token operator">|</span> Number<span class="token punctuation">}</span></span> 覆写成功返回success，覆写失败返回0，服务器连接失败返回-1
     */</span>
    <span class="token function">OverwriteFile</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span>filecontent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reqOverwriteFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/OverwriteFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span>filename<span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span>filecontent<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqOverwriteFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@function</span> 覆写json文件
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">filecontent</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String <span class="token operator">|</span> Number<span class="token punctuation">}</span></span> 覆写成功返回success，覆写失败返回0，服务器连接失败返回-1
     */</span>
    <span class="token function">OverwriteJsonFile</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span>filecontent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reqOverwriteJsonFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/OverwriteJsonFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span>filename<span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span>filecontent<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqOverwriteJsonFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@function</span> 向特定文件写入一行内容
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filename</span>
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">filecontent</span>
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>String <span class="token operator">|</span> Number<span class="token punctuation">}</span></span> 写入成功返回success，覆写失败返回0，服务器连接失败返回-1
     */</span>
    <span class="token function">WriteLineToFile</span><span class="token punctuation">(</span><span class="token parameter">filename<span class="token punctuation">,</span>filecontent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> reqWriteLineToFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>server_url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/WriteLineToFile</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;fileName&quot;</span><span class="token operator">:</span>filename<span class="token punctuation">,</span><span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span>filecontent<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>HttpRequestMethod<span class="token punctuation">.</span>Post<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>reqWriteLineToFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>




</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以直接调用即可，不用反复写</p><p>调用示例(截取自玩家交易市场部分代码)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> world <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@minecraft/server&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ExternalFS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./API/filesystem&#39;</span><span class="token punctuation">;</span>

<span class="token comment">//违禁物品，等后期接入配置文件</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExternalFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">10086</span>
<span class="token keyword">var</span> MarketData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>


<span class="token comment">//服务器启动监听&amp;&amp;获得玩家市场数据</span>
world<span class="token punctuation">.</span>afterEvents<span class="token punctuation">.</span>worldInitialize<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">getJSONFileData</span><span class="token punctuation">(</span><span class="token string">&quot;market.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//文件不存在</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fs<span class="token punctuation">.</span><span class="token function">CreateNewJsonFile</span><span class="token punctuation">(</span><span class="token string">&quot;market.json&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    MarketData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;玩家市场文件不存在，已成功创建！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;依赖服务器连接失败！请检查依赖服务器是否成功启动，以及端口是否设置正确！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;依赖服务器连接失败！请检查依赖服务器是否成功启动，以及端口是否设置正确！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//文件存在且服务器连接成功</span>
            MarketData <span class="token operator">=</span> result<span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;玩家市场数据获取成功！&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实际应用</strong></p>`,5),R={href:"https://github.com/Nia-Server/NiaServer-Core/blob/dev/development_behavior_packs/NIA_V4.0_BP/scripts/market.js",target:"_blank",rel:"noopener noreferrer"};function J(B,I){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,n("figure",null,[n("a",k,[d,t(a)]),v]),m,n("p",null,[s("2.您可以前往"),b,s("项目地址的"),n("a",g,[s("release"),t(a)]),s("下载最新release构建的"),h,s("来获取最新版的"),f]),n("p",null,[s("3.如果您在使用期间遇到了问题/有建议，您可以前往"),q,s("的"),n("a",y,[s("issues"),t(a)]),s("进行反馈！")]),w,n("p",null,[s("1.前往我的世界官网"),n("a",N,[s("下载BDS"),t(a)]),s("，并将下好的服务端解压")]),x,n("p",null,[s("5.根据自己的平台，下载最新的"),n("a",F,[s("NTQQ"),t(a)]),s("，后根据"),n("a",_,[s("LLONEBot安装教程"),t(a)]),s("安装相应的机器人框架")]),C,n("ul",null,[n("li",null,[n("a",H,[s("创建文件夹"),t(a)])]),n("li",null,[n("a",j,[s("删除文件"),t(a)])]),n("li",null,[n("a",O,[s("向NIAHttpBOT显示一行输出"),t(a)])])]),n("p",null,[s("如需了解更多DOS指令，请前往"),n("a",S,[s("微软官方文档站"),t(a)]),s("查看")]),T,n("p",null,[n("a",D,[s("点击下载示例文件"),t(a)])]),P,n("p",null,[n("a",R,[s("玩家交易市场"),t(a)])])])}const $=e(l,[["render",J],["__file","Http-Bot.html.vue"]]);export{$ as default};
